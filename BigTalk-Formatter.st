Object subclass: #BigTalkFormatter	instanceVariableNames: 'stream indentLevel'	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-Formatter'!!BigTalkFormatter methodsFor: 'formatting' stamp: 'jws 11/20/2024 07:09'!escapeQuotes: aString	| writer reader |	reader := aString readStream.	writer := WriteStream on: String new.	[reader atEnd]		whileFalse:			[| nextChar |			nextChar := reader next.			nextChar = $" ifTrue: [writer nextPut: nextChar].			writer nextPut: nextChar].	^writer contents! !!BigTalkFormatter methodsFor: 'formatting' stamp: 'jws 11/15/2024 11:48'!indent	stream tab: self indentLevel! !!BigTalkFormatter methodsFor: 'formatting' stamp: 'jws 11/15/2024 11:50'!lf	stream lf! !!BigTalkFormatter methodsFor: 'formatting' stamp: 'jws 11/15/2024 11:49'!tabIn	indentLevel := indentLevel + 1! !!BigTalkFormatter methodsFor: 'formatting' stamp: 'jws 11/15/2024 11:49'!tabOut	indentLevel := indentLevel - 1! !!BigTalkFormatter methodsFor: 'initialize-release' stamp: 'jws 11/15/2024 11:47'!initialize	super initialize.	stream := WriteStream on: ''.	indentLevel := 0.! !!BigTalkFormatter methodsFor: 'accessing' stamp: 'jws 11/15/2024 11:47'!indentLevel	^ indentLevel! !!BigTalkFormatter methodsFor: 'accessing' stamp: 'jws 11/15/2024 11:47'!indentLevel: anObject	indentLevel := anObject.! !!BigTalkFormatter methodsFor: 'accessing' stamp: 'jws 11/15/2024 11:15'!stream	^ stream! !!BigTalkFormatter methodsFor: 'accessing' stamp: 'jws 11/15/2024 11:15'!stream: anObject	stream := anObject.! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:03'!visitBTArgumentList: aBTArgumentList 		stream nextPutAll: '('.	aBTArgumentList arguments		do: [:each | each accept: self]		separatedBy: [stream nextPutAll: ', '].	stream nextPutAll: ')'! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:00'!visitBTArithmeticOperator: aBTArithmeticOperator 		stream space; nextPutAll: aBTArithmeticOperator opSymbol; space! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 20:59'!visitBTAssignmentStatement: aBTAssignmentStatement 		stream 		nextPutAll: aBTAssignmentStatement variableId;		nextPutAll: ' <- '.	aBTAssignmentStatement expression accept: self.! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 20:56'!visitBTBinaryExpression: aBTBinaryExpression 		aBTBinaryExpression arg1 accept: self.	aBTBinaryExpression operator accept: self.	aBTBinaryExpression arg2 accept: self.! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/18/2024 11:25'!visitBTBooleanType: aBTBooleanType 		stream nextPutAll: 'boolean'! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:32'!visitBTCompoundStatement: aBTCompoundStatement 		stream nextPutAll: '['.	aBTCompoundStatement statements		do: [:each | each accept: self]		separatedBy: [self lf; indent].	stream nextPutAll: ']'.! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 20:51'!visitBTFunction: aBTFunction 		stream		nextPutAll: 'function ';		nextPutAll: aBTFunction identifier.	aBTFunction parameters accept: self.	stream nextPutAll: ' : '.	aBTFunction returnType accept: self.	self lf; indent.	aBTFunction methodBody accept: self.	! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:01'!visitBTFunctionCall: aBTFunctionCall 		stream nextPutAll: aBTFunctionCall identifier.	aBTFunctionCall arguments accept: self! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/20/2024 06:23'!visitBTGroupedExpression: aBTGroupedExpression 		stream nextPutAll: '('.	aBTGroupedExpression expression accept: self.	stream nextPutAll: ')'.! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/15/2024 11:34'!visitBTIOStatement: aBTWriteString 	self shouldBeImplemented! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:35'!visitBTIfThenElseStatement: aBTIfThenElseStatement 		stream nextPutAll: 'if '.	aBTIfThenElseStatement expression accept: self.	stream nextPutAll: ' then'.	self lf; tabIn; indent.	aBTIfThenElseStatement trueStatement accept: self.	self lf; tabOut; indent.	stream nextPutAll: 'else'.	self lf; tabIn; indent.	aBTIfThenElseStatement falseStatement accept: self.	self tabOut! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/20/2024 06:28'!visitBTIfThenStatement: aBTIfThenStatement 		stream nextPutAll: 'if '.	aBTIfThenStatement expression accept: self.	stream nextPutAll: ' then'.	self lf; tabIn; indent.	aBTIfThenStatement trueStatement accept: self.	self tabOut! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/18/2024 11:24'!visitBTIntegerType: aBTIntegerType 		stream nextPutAll: 'integer'! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/20/2024 06:29'!visitBTLogicalOperator: aBTLogicalOperator 		stream space; nextPutAll: aBTLogicalOperator opSymbol; space! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:33'!visitBTMethodBody: aBTMethodBody 		aBTMethodBody variables accept: self.	stream nextPutAll: 'do'.	self lf; tabIn; indent.	aBTMethodBody statement accept: self.	self lf; tabOut! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:24'!visitBTMethods: aBTMethods 		aBTMethods declarations isEmpty		ifTrue: [^self].	stream nextPutAll: 'methods'; lf.	self tabIn; indent.	aBTMethods declarations		do: [:each | each accept: self]		separatedBy: [self lf; indent].	self tabOut! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 20:50'!visitBTParameterList: aBTParameterList 		stream nextPutAll: '('.	aBTParameterList parameters		do: [:each | each accept: self]		separatedBy: [stream nextPutAll: ', '].	stream nextPutAll: ')'! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:26'!visitBTProcedure: aBTProcedure 		stream		nextPutAll: 'procedure ';		nextPutAll: aBTProcedure identifier.	aBTProcedure parameters accept: self.	self lf; indent.	aBTProcedure methodBody accept: self.! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:28'!visitBTProcedureCall: aBTProcedureCall 		stream nextPutAll: aBTProcedureCall identifier.	aBTProcedureCall arguments accept: self! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/15/2024 11:50'!visitBTProgram: aBTProgram 		stream nextPutAll: 'program'; lf.	aBTProgram variables accept: self.	aBTProgram methods accept: self.	stream nextPutAll: 'do'.	self lf; tabIn; indent.	aBTProgram statement accept: self.! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 20:57'!visitBTRelationalOperator: aBTRelationalOperator 		stream space; nextPutAll: aBTRelationalOperator opSymbol; space! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/18/2024 11:25'!visitBTStringType: aBTStringType 		stream nextPutAll: 'string'! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/20/2024 06:24'!visitBTUnaryExpression: aBTUnaryExpression 		self stream nextPutAll: 'NOT '.	aBTUnaryExpression expression accept: self.! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/18/2024 11:20'!visitBTVariableDeclaration: aBTVariableDeclaration 		stream 		nextPutAll: aBTVariableDeclaration name; 		nextPutAll: ' : '.	aBTVariableDeclaration type accept: self! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 20:56'!visitBTVariableReference: aBTVariableReference 		stream nextPutAll: aBTVariableReference identifier! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/18/2024 11:26'!visitBTVariables: aBTVariables 		aBTVariables declarations isEmpty		ifTrue: [^self].	stream nextPutAll: 'variables'; lf.	self tabIn; indent.	aBTVariables declarations		do: [:each | each accept: self]		separatedBy: [self lf; indent].	self tabOut; lf; indent! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:31'!visitBTWhileStatement: aBTWhileStatement 		stream nextPutAll: 'while '.	aBTWhileStatement expression accept: self.	stream nextPutAll: ' do'.	self lf; tabIn; indent.	aBTWhileStatement statement accept: self.	self tabOut! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:07'!visitBTWriteLine: aBTWriteLine 		stream nextPutAll: 'writeLine'! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/20/2024 06:25'!visitBTliteralBoolean: aBTliteralBoolean 		stream nextPutAll: aBTliteralBoolean value printString! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 20:58'!visitBTliteralInteger: aBTliteralInteger 		stream nextPutAll: aBTliteralInteger value printString! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/20/2024 07:02'!visitBTliteralString: aBTliteralString 		stream		nextPut: $";		nextPutAll: (self escapeQuotes: aBTliteralString value);		nextPut: $"! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/19/2024 21:07'!visitWriteInteger: aBTWriteInteger 		stream nextPutAll: 'writeInteger '.	aBTWriteInteger expression accept: self.! !!BigTalkFormatter methodsFor: 'visiting' stamp: 'jws 11/15/2024 11:40'!visitWriteString: aBTWriteString 		stream nextPutAll: 'writeString '.	aBTWriteString expression accept: self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BigTalkFormatter class	instanceVariableNames: ''!!BigTalkFormatter class methodsFor: 'formatting' stamp: 'jws 11/15/2024 11:24'!format: aBigTalkProgram	| formatter ast |	ast := BigTalkParser parse: aBigTalkProgram.	formatter := self new.	ast accept: formatter.	^formatter stream contents! !TestCase subclass: #BigTalkFormatterTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-Formatter'!!BigTalkFormatterTestCase methodsFor: 'running' stamp: 'jws 11/19/2024 21:35'!testFormatFactorialProgram	| formattedCode |	formattedCode := BigTalkFormatter format: self uglyFactorialProgram.	formattedCode inspect! !!BigTalkFormatterTestCase methodsFor: 'running' stamp: 'jws 11/15/2024 11:23'!testFormatNanoProgram	| formattedCode |	formattedCode := BigTalkFormatter format: self uglyNanoProgram.	self 		assert: self nanoProgram		equals: formattedCode! !!BigTalkFormatterTestCase methodsFor: 'running' stamp: 'jws 11/20/2024 06:20'!testFormatOperatorProgram	| formattedCode |	formattedCode := BigTalkFormatter format: self operatorProgram.	formattedCode inspect! !!BigTalkFormatterTestCase methodsFor: 'running' stamp: 'jws 11/19/2024 21:34'!testFormatProcedureProgram	| formattedCode |	formattedCode := BigTalkFormatter format: self procedureProgram.	formattedCode inspect! !!BigTalkFormatterTestCase methodsFor: 'running' stamp: 'jws 11/20/2024 07:09'!testFormatQuotedProgram	| formattedCode |	formattedCode := BigTalkFormatter format: self quotedProgram.	formattedCode inspect! !!BigTalkFormatterTestCase methodsFor: 'running' stamp: 'jws 11/20/2024 07:21'!testFormatVariablesProgram	| formattedCode |	formattedCode := BigTalkFormatter format: self uglyVariablesProgram.	formattedCode inspect! !!BigTalkFormatterTestCase methodsFor: 'accessing' stamp: 'jws 11/19/2024 20:43'!factorialProgram	^'programvariables	msg : stringmethods	function factorial(n:integer) : integer	do		if n = 0 then			factorial <- 1		else			factorial <- n * factorial( n - 1 )do	[msg <- "Factorial 5 is "	writeString msg	writeInteger factorial(5)	writeLine]' withUnixLineEndings! !!BigTalkFormatterTestCase methodsFor: 'accessing' stamp: 'jws 11/15/2024 11:44'!nanoProgram	^'programdo	writeString "Hello, World!!"' withUnixLineEndings! !!BigTalkFormatterTestCase methodsFor: 'accessing' stamp: 'jws 11/20/2024 06:19'!operatorProgram	^'program	do		if (9 > 7) AND (NOT (true = false)) OR ("hello" < "abc") then			writeInteger (((7 + 3)*(8 - 2)) MOD 7) / 2'! !!BigTalkFormatterTestCase methodsFor: 'accessing' stamp: 'jws 11/20/2024 06:31'!procedureProgram	^'program	methods    		procedure sayHello()		variables			msg : string    		do        		[msg <- "Hello, World!!"			writeString msg]        		procedure countdown(count:integer, message:string)    		variables         		counter:integer    		do        		[counter <- count            	while counter > 0 do	            	[counter <- counter - 1                		writeInteger counter]            	writeString message            	writeLine]           	do		[sayHello()		countdown(10, "Blastoff!!")]'! !!BigTalkFormatterTestCase methodsFor: 'accessing' stamp: 'jws 11/20/2024 07:08'!quotedProgram	^'programdo	writeString """MUST a name mean something?"" Alice asked doubtfully."' ! !!BigTalkFormatterTestCase methodsFor: 'accessing' stamp: 'jws 11/19/2024 20:44'!uglyFactorialProgram	^'program variables msg : string methods function factorial(n:integer) : integer 	do if n = 0 then 	factorial <- 1 else factorial <- n * factorial( n - 1 )do [msg <- "Factorial 5 is " writeString msg writeInteger factorial(5) writeLine]' ! !!BigTalkFormatterTestCase methodsFor: 'accessing' stamp: 'jws 11/15/2024 11:21'!uglyNanoProgram	^'program        do 	writeString       "Hello, World!!"'! !!BigTalkFormatterTestCase methodsFor: 'accessing' stamp: 'jws 11/18/2024 11:10'!uglyVariablesProgram	^'program        variables count : integer  msg : string     dareI : boolean     do writeString "done"'! !