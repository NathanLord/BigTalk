Object subclass: #BigTalkCodeGenerator	instanceVariableNames: 'stream indentLevel'	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-CodeGenerator'!!BigTalkCodeGenerator methodsFor: 'initialize-release' stamp: 'nl 11/22/2024 15:16'!initialize	super initialize.	stream := WriteStream on: ''.	indentLevel := 0.! !!BigTalkCodeGenerator methodsFor: 'utility' stamp: 'nl 12/4/2024 15:43'!quotedWithEscapedQuotes: aString

	| rstream wstream |	rstream := aString readStream.	wstream := WriteStream on: String new.	wstream nextPut: $".	[rstream atEnd]		whileFalse:			[(rstream peek = $") ifTrue: [wstream nextPut: $\].				wstream nextPut: rstream next].	wstream nextPut: $".	^wstream contents.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/4/2024 11:14'!visitBTArgumentList: aBTArgumentList 		stream nextPutAll: '('.	aBTArgumentList arguments		do: [:each | each accept: self]		separatedBy: [stream nextPutAll: ', '].	stream nextPutAll: ')'! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 11:50'!visitBTArithmeticOperator: aBTArithmeticOperator 		(aBTArithmeticOperator opSymbol = 'MOD')		ifTrue: [stream nextPutAll: '%']		ifFalse: [stream nextPutAll: aBTArithmeticOperator opSymbol ].! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/4/2024 14:25'!visitBTAssignmentStatement: aBTAssignmentStatement 		stream 		nextPutAll: aBTAssignmentStatement variableId;		nextPutAll: ' = '.	aBTAssignmentStatement expression accept: self.	stream nextPutAll: ';'.	! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 15:49'!visitBTBinaryExpression: aBTBinaryExpression 		aBTBinaryExpression arg1 accept: self.	stream space.	aBTBinaryExpression operator accept: self.	stream space.	aBTBinaryExpression arg2 accept: self.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 13:14'!visitBTBooleanType: aBTBooleanType 		stream nextPutAll: 'bool '.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/4/2024 11:34'!visitBTCompoundStatement: aBTCompoundStatement 		stream lf; tab.	aBTCompoundStatement statements		do: [:each | each accept: self]		separatedBy: [stream lf; tab].! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 15:24'!visitBTFunction: aBTFunction 		aBTFunction returnType accept: self.	stream 		nextPutAll: ' _';		nextPutAll: aBTFunction identifier.	aBTFunction parameters accept: self.	stream		nextPutAll: ' {';		lf; tab.	aBTFunction returnType accept: self.	stream 		nextPutAll: ' ';		nextPutAll: aBTFunction identifier;		nextPutAll: ';';		lf.	aBTFunction methodBody accept: self.	stream		nextPutAll: 'return ';		nextPutAll: aBTFunction identifier;		nextPutAll: ';';lf;		nextPutAll: '}'.			! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/4/2024 14:26'!visitBTFunctionCall: aBTFunctionCall 		stream 		nextPutAll: ' _';		nextPutAll: aBTFunctionCall identifier.	aBTFunctionCall arguments accept: self.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 11:51'!visitBTGroupedExpression: aBTGroupedExpression 	stream nextPutAll: '('.	aBTGroupedExpression expression accept: self.	stream nextPutAll: ')'.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 15:47'!visitBTIfThenElseStatement: aBTIfThenElseStatement 		stream nextPutAll: 'if('.	aBTIfThenElseStatement expression accept: self.	stream 		nextPutAll: '){';		lf; tab.	aBTIfThenElseStatement trueStatement accept: self.	stream 		nextPutAll: '} else {';		lf; tab.	aBTIfThenElseStatement falseStatement accept: self.	stream 		nextPutAll: '}'.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 11:36'!visitBTIfThenStatement: aBTIfThenStatement 		stream nextPutAll: 'if ('.	aBTIfThenStatement expression accept: self.	stream nextPutAll: ') {'; lf; tab.	aBTIfThenStatement trueStatement accept: self.
	stream nextPutAll: ' }'.	! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 15:25'!visitBTIntegerType: aBTIntegerType 		stream nextPutAll: 'int'.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 11:54'!visitBTLogicalOperator: aBTLogicalOperator 		(aBTLogicalOperator opSymbol = 'AND')		ifTrue: [stream nextPutAll: '&&']		ifFalse: [stream nextPutAll: '||'].! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 15:36'!visitBTMethodBody: aBTMethodBody 		aBTMethodBody variables accept: self.	aBTMethodBody statement accept: self.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 11:43'!visitBTMethods: aBTMethods	stream nextPutAll: '// Methods '; lf.	aBTMethods declarations		do: 			[:each | 			each accept: self.].! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 15:34'!visitBTParameterList: aBTParameterList 		stream nextPutAll: '('.	aBTParameterList parameters		do: [:each | each accept: self]		separatedBy: [stream nextPutAll: ', '].	stream nextPutAll: ')'.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 13:57'!visitBTProcedure: aBTProcedure 		stream 		nextPutAll: 'void ';		nextPutAll: aBTProcedure identifier.	aBTProcedure parameters accept: self.	stream		nextPutAll: ' {';		lf; tab.	aBTProcedure methodBody accept: self.	stream	nextPutAll: '}';lf.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 13:41'!visitBTProcedureCall: aBTProcedureCall 		stream nextPutAll: aBTProcedureCall identifier.	aBTProcedureCall arguments accept: self.	stream nextPutAll: ';';lf.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 13:48'!visitBTProgram: aBTProgram	stream nextPutAll: '#include <stdio.h>'; lf.	stream nextPutAll: '#include <stdbool.h>'; lf.	aBTProgram variables accept: self.	aBTProgram methods accept: self.	stream		nextPutAll: '// Program'; lf;		nextPutAll: 'int main(int argc, char *argv[]){'; lf.	aBTProgram statement accept: self.	stream lf.	stream nextPutAll: '}'		! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 16:00'!visitBTRelationalOperator: aBTRelationalOperator 		aBTRelationalOperator opSymbol = #=		ifTrue: [^stream nextPutAll: '=='].	stream nextPutAll: aBTRelationalOperator opSymbol.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 13:45'!visitBTStringType: aBTStringType 		stream nextPutAll: 'char *'.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 11:42'!visitBTUnaryExpression: aBTUnaryExpression 		stream nextPutAll: '!!'.	aBTUnaryExpression expression accept: self.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 15:12'!visitBTVariableDeclaration: aBTVariableDeclaration 		aBTVariableDeclaration type accept: self.	stream 		space;		nextPutAll: aBTVariableDeclaration name.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 15:51'!visitBTVariableReference: aBTVariableReference 	stream nextPutAll: aBTVariableReference identifier.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 11/22/2024 15:24'!visitBTVariables: aBTVariables 	stream nextPutAll: '// Variables '; lf.	aBTVariables declarations		do: 			[:each | 			each accept: self.			stream nextPutAll: ';'; lf].				! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 13:37'!visitBTWhileStatement: aBTWhileStatement 		stream nextPutAll: 'while ('.	aBTWhileStatement expression accept: self.	stream nextPutAll: ') { '; lf; tab.	aBTWhileStatement statement accept: self.	stream nextPutAll: '}'; lf.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/4/2024 11:28'!visitBTWriteLine: aBTWriteLine 		stream nextPutAll: 'printf("\n");'! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 11:23'!visitBTliteralBoolean: aBTliteralBoolean 		(aBTliteralBoolean value asString = 'true')		ifTrue: [stream nextPutAll: '1']		ifFalse: [stream nextPutAll: '0'].! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/2/2024 16:02'!visitBTliteralInteger: aBTliteralInteger 		stream nextPutAll: aBTliteralInteger value asString.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/4/2024 15:45'!visitBTliteralString: aBTliteralString 		stream nextPutAll: (self quotedWithEscapedQuotes: aBTliteralString value).	! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/6/2024 11:25'!visitWriteBoolean: aBTWriteBoolean 	stream nextPutAll: 'printf("%s", '.	aBTWriteBoolean expression accept: self.	stream nextPutAll: ' ? "true" : "false");'.	
	! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/4/2024 11:49'!visitWriteInteger: aBTWriteInteger 		stream nextPutAll: 'printf("%d", '.	aBTWriteInteger expression accept: self.	stream nextPutAll: ');'.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'nl 12/4/2024 11:48'!visitWriteString: aBTWriteString 		stream  nextPutAll: 'printf("%s", '.	aBTWriteString expression accept: self.	stream  nextPutAll: ');'.! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'nl 11/22/2024 15:16'!indentLevel	^ indentLevel! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'nl 11/22/2024 15:16'!indentLevel: anObject	indentLevel := anObject.! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'nl 11/22/2024 15:16'!stream	^ stream! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'nl 11/22/2024 15:16'!stream: anObject	stream := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BigTalkCodeGenerator class	instanceVariableNames: ''!!BigTalkCodeGenerator class methodsFor: 'generating' stamp: 'nl 11/22/2024 15:14'!generate: aBigTalkProgram		| generator ast |	ast := BigTalkParser parse: aBigTalkProgram.	generator := self new.	ast accept: generator.	^generator stream contents! !TestCase subclass: #BigTalkCodeGeneratorTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-CodeGenerator'!!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'nl 12/2/2024 11:00'!testFactorial	| cCode |	cCode := BigTalkCodeGenerator generate: self factorialProgram.	cCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'nl 11/22/2024 16:05'!testNano	| cCode |	cCode := BigTalkCodeGenerator generate: self nanoProgram.	cCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'nl 12/6/2024 11:18'!testNanoBooleanProgram	| cCode |	cCode := BigTalkCodeGenerator generate: self nanoBooleanProgram.	cCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'nl 12/6/2024 11:15'!testOperatorProgram	| cCode |	cCode := BigTalkCodeGenerator generate: self operatorProgram.	cCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'nl 12/6/2024 13:18'!testProcedureProgram	| cCode |	cCode := BigTalkCodeGenerator generate: self procedureProgram.	cCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'nl 12/6/2024 13:09'!testQuotedProgram	| cCode |	cCode := BigTalkCodeGenerator generate: self quotedProgram.	cCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'nl 12/6/2024 13:11'!testVariablesProgram	| cCode |	cCode := BigTalkCodeGenerator generate: self variablesProgram.	cCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'nl 12/2/2024 10:59'!factorialProgram	^'programvariables	msg : stringmethods	function factorial(n:integer) : integer	do		if n = 0 then			factorial <- 1		else			factorial <- n * factorial( n - 1 )do	[msg <- "Factorial 5 is "	writeString msg	writeInteger factorial(5)	writeLine]' withUnixLineEndings! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'nl 12/6/2024 11:17'!nanoBooleanProgram	^'program do writeBoolean true'! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'nl 11/22/2024 11:40'!nanoProgram	^'program do writeString "Hello, World!!"'! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'nl 12/6/2024 11:14'!operatorProgram	^'program	do		if (9 > 7) AND (NOT (true = false)) OR ("hello" < "abc") then			writeInteger (((7 + 3)*(8 - 2)) MOD 7) / 2'! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'nl 12/6/2024 13:17'!procedureProgram	^'program	methods    		procedure sayHello()    		do        		writeString "Hello, World!!"        		procedure countdown(count:integer, message:string)    		variables         		counter:integer    		do        		[counter <- count            	while counter > 0 do	            	[counter <- counter - 1                		writeInteger counter]            	writeString message            	writeLine]           	do		[sayHello()		countdown(10, "Blastoff!!")]'! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'nl 12/6/2024 13:09'!quotedProgram	^'programdo	writeString """MUST a name mean something?"" Alice asked doubtfully."' ! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'nl 12/6/2024 13:11'!variablesProgram	^'program	variables		answer : integer		msg : string		isIt : boolean	do		[answer <- 42		writeInteger answer		writeLine		msg <- "Hello, World!!"		writeString msg		writeLine		isIt <- true		writeBoolean isIt		writeLine]'! !